#!/bin/bash

#
# pacaur: A simple cower wrapper to fetch PKGBUILDS from aur & abs
#

name="pacaur"
version="2.1.7"

#
# Default config
#

pacmanBin="pacman-color"        # pacman binary
editor=${EDITOR:-vi}            # PKGBUILD editor
buildDir=/home/aur/build        # build directory
clean=true                      # cleanup after install
fallback=true                   # pacman fallback
color=true                      # enable color

tmpDir="${TMPDIR:-/tmp}/${name}tmp-$USER"

colorR="\e[1;31m"
colorG="\e[1;32m"
colorY="\e[1;33m"
colorB="\e[1;34m"
colorM="\e[1;35m"
colorC="\e[1;36m"
colorW="\e[1;37m"

#
# Source user config
#

source /etc/${name}.conf

#
# Color
#

if $color; then
    cower='cower --color=always'
    bold=$(tput bold)
    reset=$(tput sgr0)
else
    cower='cower'
    bold=''
    reset=''
    colorR=''
    colorG=''
    colorY=''
    colorB=''
    colorM=''
    colorC=''
    colorW=''
fi

#
# Functions
#

runasroot() {
    if [[ $UID -eq 0 ]]; then
        "$@"
    elif sudo -v &>/dev/null && sudo -l "$@" &>/dev/null; then
        sudo "$@"
    else
        echo -n "root "
        # echo hack to ensure all of the args get taken into account
        su root -c "$(echo $@)"
    fi
}

SearchAur() {
    [[ ! $quiet ]] && $cower -s $@
    [[ $quiet ]] && $cower -sq --color=never $@
}

InfoAur() {
    [[ $count -eq 1 ]] && $cower -i $@
    [[ $count -ne 1 ]] && $cower -ii $@
}

DownloadAur() {
    [[ ! $force ]] && $cower -d $@ -t $buildDir || $cower -d -f $@ -t $buildDir
}

DownloadDepsAur() {
    # download dependencies recursively and return AUR deps only
    [[ $force ]] && f="-f"
    deps=($($cower -dd $f $@ -t $buildDir | tee 1>&2 >(awk -F " " '{print $2}'| sed -r "s:\x1B\[[0-9;]*[mK]::g")))

    timeout ${deps[@]}
}

FindDepsAur() {
    # set tmpdir
    mkdir -p "$tmpDir"

    # check dependencies recursively and return AUR deps only
    deps=($($cower -dd $@ -t $tmpDir | tee 1>/dev/null >(awk -F " " '{print $2}'| sed -r "s:\x1B\[[0-9;]*[mK]::g")))

    timeout ${deps[@]}

    # clean tmpdir
    rm -rf "$tmpDir" &>/dev/null
}

CheckAur() {
    [[ $quiet ]] && $cower -uq --color=never $@ || [[ ! $quiet ]] && $cower -u $@
}

CheckRepo() {
    outofdate=($($pacmanBin -Quq $@))
    if [[ ${outofdate[@]} != "" ]]; then
        Qversion=($(expac -Q %v ${outofdate[@]}))
        Sversion=($(expac -S -1 %v ${outofdate[@]}))

        local i=0
        for package in ${outofdate[@]}; do
            [[ ! $quiet ]] && info "${colorW}${outofdate[$i]} ${colorR}${Qversion[$i]} ${reset}-> ${colorG}${Sversion[$i]}${reset}" || echo ${outofdate[$i]}
            ((i++))
        done
    fi
}

UpgradeAur() {
    info "${colorW}Starting AUR upgrade...${reset}"
    pkgs=$($cower -u ${ignorepkgs[@]} $@ | tee 1>&2 >(awk -F " " '{print $2}'| sed -r "s:\x1B\[[0-9;]*[mK]::g"))

    # add devel packages
    if [[ $devel ]]; then
        aurpkgs=( $($pacmanBin -Qmq) )
        Qversion=($(expac -Q %v ${aurpkgs[@]}))

        # ignored packages
        ignoredpkgs+=( $(grep '^ *IgnorePkg' '/etc/pacman.conf' | cut -d '=' -f 2-) )
        ignoredpkgs+=( $(grep '^ *IgnorePkg' "$HOME/.config/cower/config" | cut -d '=' -f 2-) )
        ignoredpkgs=(${ignoredpkgs[@]//,/ })

        # set tmpdir
        mkdir -p "$tmpDir"

        local i=0
        for package in ${aurpkgs[@]}; do
            DownloadPkgbuild ${aurpkgs[$i]} &
            paraexec
            ((i++))
        done
        wait
        for (( j=0; j<${#aurpkgs[@]}; j++)); do
            unset _darcstrunk _cvsroot _gitroot _svntrunk _bzrtrunk _hgroot
            . "$tmpDir/${aurpkgs[$j]}.PKGBUILD"
            if [[ ${_darcstrunk} || ${_cvsroot} || ${_gitroot} || ${_svntrunk} || ${_bzrtrunk} || ${_hgroot} ]]; then
                if [[ "${ignoredpkgs[@]}" =~ "${aurpkgs[$j]}" ]]; then
                    continue
                fi
                info "${colorW}${aurpkgs[$j]} ${colorY}${Qversion[$j]} ${reset}"
                aurdevel=("${aurdevel[@]}" "${aurpkgs[$j]}")
            fi
        done

        # clean tmpdir
        rm -rf "$tmpDir" &>/dev/null

        [[ ! ${pkgs[@]} ]] && pkgs=("${aurdevel[@]}") || pkgs=("${pkgs[@]}" "${aurdevel[@]}")
        pkgs=($(echo ${pkgs[@]} | awk -F "\n" '{print}' | awk -F " " '{print}'))
    fi

    if [[ $pkgs == "" ]]; then
        echo " there is nothing to do"
        exit   
    fi

    timeout ${pkgs[@]}
}

Proceed() {
    echo -ne "\nProceed with installation? [Y/n] "
    
    if ! [[ $noconfirm ]]; then
        read yn
        case $yn in
        [Yy]|[Yy]es|'')
            return
        ;;
        *)
            CleanUp ${deps[@]} &>/dev/null
            exit
        ;;
        esac
    else
        echo ""
    fi
}

CopyAbs() {
    for i in "$@"; do
        if [[ -e $buildDir/$i/PKGBUILD && ! $force ]]; then
            warn "${colorW}$i${reset} PKGBUILD already exists in $buildDir. Use -f to overwrite."
        else
            cp -r `find /var/abs -name "$i"` $buildDir || error "${colorW}$i${reset} not found"
            success "${colorW}$i${reset} copied in $buildDir"
        fi
    done
}

EditPkgs() {
    if [[ $edit && ! $noedit ]]; then
        info "Editing ${colorW}$@${reset}... "
        for i in "$@"; do
            [[ -e $buildDir/$i/PKGBUILD ]] && $editor $buildDir/$i/PKGBUILD && success "${colorW}$i${reset} PKGBUILD edited" || error "Could not open ${colorW}$i${reset} PKGBUILD"
        done
    fi
}

CleanUp() {
    if [[ $clean == true ]]; then
        info "Cleaning up ${colorW}$@${reset}... "
        cd $buildDir
        for i in "$@"; do
            # hack for cvs protected files
            chmod -R 755 $i &>/dev/null
            rm -r $i && success "${colorW}$i${reset} cleaned" || warn "Could not clean ${colorW}$i${reset}"
        done
    fi
}

MakePkgs() {
    #info "AUR package(s) to build: ${colorW}${deps[@]}${reset}"
    echo -e "\n${colorY}AUR Targets (${#deps[@]}):${reset} ${deps[@]}"

    Proceed

    EditPkgs ${deps[@]}

    # reverse deps order
    deps=($(echo ${deps[@]} | awk -F "\n" '{print}' | awk -F " " '{for (i=NF;i>=1;i--) print $i}'))

    # remember explicitly installed packages
    if [[ $expl == "" ]]; then
      read -ra expl <<< ${pkgs[@]}
    fi

    # set architecture variables
    if [[ ! $confSourced ]]; then
        source /etc/makepkg.conf
        source /etc/abs.conf
        export PACMAN=$pacmanBin
        confSourced=true
    fi

    local j
    for j in "${deps[@]}"; do
        if [ -e $buildDir/$j/PKGBUILD ]; then
            info "Building ${colorW}$j${reset} package..."
            cd $buildDir/$j
            if [[ $install ]]; then
                makepkg -sfi ${makeopts[@]} --noconfirm
                # if AUR dep, install as --asdeps
                # if upgrade, do no change status
                if [[ ! $upgrade ]]; then
                    isexpl=false
                    for k in ${expl[@]}; do
                        if [[ $k == $j ]]; then
                            isexpl=true
                        fi
                    done
                    if [[ $isexpl != true ]]; then
                        runasroot $pacmanBin -D --asdeps $j ${pacopts[@]} &>/dev/null
                    fi
                fi
            else
                makepkg -sf ${makeopts[@]} --noconfirm
            fi
        else
            error "Could not open ${colorW}$j${reset} PKGBUILD"
        fi
    done
}

CleanCache() {
    # set cache variables
    source /etc/makepkg.conf
    export PACMAN=$pacmanBin

    if [[ $PKGDEST && $PKGDEST != '/var/cache/pacman/pkg/' ]]; then
        echo -e "\n${colorW}AUR cache directory:${reset} $PKGDEST"
        if [[ $count -eq 1 ]]; then
            echo -e "${colorW}Packages to keep:${reset}\n  All locally installed packages"
            echo -ne "Do you want to remove all other packages from AUR cache? [Y/n] "

            read yn
            case $yn in
            [Yy]|[Yy]es|'')
                echo "removing old packages from cache..."
                for package in $(ls $PKGDEST | sed "s#\(.*\)-.*#\1#g" ); do
                    pkgname=$(echo $package | sed "s#\(.*\)-.*-.*#\1#g")
                    if [[ $package != $(expac -Q '%n-%v' $pkgname) ]]; then
                        rm $PKGDEST/$package-*
                    fi
                done
            ;;
            *)
                exit
            ;;
            esac
        else
            echo -ne "Do you want to remove ALL files from AUR cache? [y/N] "

            read yn
            case $yn in
            [Yy]|[Yy]es)
                echo "removing all files from AUR cache..."
                rm $PKGDEST/* &>/dev/null
            ;;
            *)
                exit
            ;;
            esac
        fi
    fi
}

DownloadPkgbuild() {
    if ! [[ -f "$tmpDir/$package.PKGBUILD" ]]; then
        curl -Lfs "https://aur.archlinux.org/packages/$package/PKGBUILD" > "$tmpDir/$package.PKGBUILD"
    fi
}

paraexec() {
    while (( $(jobs | wc -l) >= 10 )); do
        sleep 0.1
        jobs > /dev/null
    done
}

timeout(){
    if [[ $(echo $@ | grep -v "Couldn't resolve host name" | grep -v "no results found for") == "" ]]; then
        exit
    fi
}

error() {
    echo -e "${colorR}::${reset} $1" && exit
}

success() {
    echo -e "${colorG}::${reset} $1"
}

warn() {
    echo -e "${colorY}::${reset} $1"
}

info() {
    echo -e "${colorB}::${reset} $1"
}

usage() {
    echo "usage:  ${name} <operation> [options] [package(s)]"
    echo "operations:"
    echo "   -s, --search    search AUR repository for matching strings"
    echo "   -i, --info      view package information -- pass twice for details"
    echo "   -d, --download  download target(s) -- pass twice to download AUR dependencies"
    echo "   -b, --build     use existing PKGBUILD and make target(s)"
    echo "   -m, --makepkg   download and make target(s)"
    echo "   -y, --sync      download, make and install target(s)"
    echo "   -k, --check     check for AUR update(s)"
    echo "   -u, --update    update AUR package(s)"
    echo "   -abs, --abs     copy target(s) from ABS directory to build directory"
    echo ""
    echo "options:"
    echo "   -f, --force     force operation -- can be combined with the -d, -m, -y, -abs flags"
    echo "   -e, --edit      edit target PKGBUILD -- can be combined with the -d, -b, -m, -y, -u, -abs flags"
    echo "   -c, --clean     clean existing target(s) PKGBUILD -- can be combined with the -b, -m, -y, -abs flags"
    echo ""
    echo "pacman options:"
    echo " can be used with the -S, -Ss, -Si, -Sii, -Sw, -Su, -Qu, -Sc, -Scc operations"
    echo "   -r, --repo      only search or install packages from the repositories"
    echo "   -a, --aur       only search or install packages from the AUR"
    echo "   -q, --quiet     show less information for query and search"
    echo "   --devel         consider AUR development packages upgrade"
    echo "   --ignore        ignore a package upgrade (can be used more than once)"
    echo "   --noconfirm     do not prompt for any confirmation"
    echo "   --noedit        do not prompt to edit files"
    echo ""
    echo "general options:"
    echo "   -v, --version   display version information"
    echo "   -h, --help      display help information"
    echo ""
    exit
}

version() {
    echo "$name $version"
}


#
# Argument parsing
#

[[ $1 ]] || usage
pkgs=()
count=0
while [[ $1 ]]; do
    case "$1" in
        '-s'|'--search') operation=search ;;
        '-i'|'--info') operation=info; ((count++)) ;;
        '-d'|'--download') operation=download; ((count++)) ;;
        '-b'|'--build') operation=build ;;
        '-m'|'--makepkg') operation=makepkg ;;
        '-y'|'--sync') operation=makepkg ; install=true ;;
        '-k'|'--check') operation=check ;;
        '-u'|'--update') operation=makepkg; upgrade=true; force=true; install=true ;;
        '-abs'|'--abs') operation=abs ;;
        '-c'|'--clean') clean=true; cleanpkg=true ;;
        '-f'|'--force') force=true ;;
        '-e'|'--edit') edit=true; editpkg=true ;;
        '-q'|'--quiet') quiet=true ;;
        # shortcuts
        '-sq') operation=search; quiet=true ;;
        '-ii') operation=info; count=2 ;;
        '-dd') operation=download; count=2 ;;
        '-df') operation=download; ((count++)); force=true ;;
        '-de') operation=download; ((count++)); edit=true ;;
        '-def'|'-dfe') operation=download; ((count++)); edit=true; force=true ;;
        '-ddf') operation=download; count=2; force=true ;;
        '-dde') operation=download; count=2; edit=true ;;
        '-ddef'|'-ddfe') operation=download; count=2; edit=true; force=true ;;
        '-be') operation=build; edit=true ;;
        '-me') operation=makepkg; edit=true ;;
        '-mf') operation=makepkg; force=true ;;
        '-mef'|'-mfe') operation=makepkg; force=true; edit=true ;;
        '-ye') operation=makepkg; edit=true; install=true ;;
        '-yf') operation=makepkg; force=true; install=true ;;
        '-yfe'|'-yef') operation=makepkg; force=true; edit=true; install=true ;;
        '-ue') operation=makepkg; upgrade=true; force=true; edit=true; install=true ;;
        '-kq') operation=check; quiet=true ;;
        '-abse') operation=abs; edit=true ;;
        '-absf') operation=abs; force=true ;;
        '-absef'|'-absfe') operation=abs; force=true; edit=true ;;
        # pacman
        '-S'|'--sync') option=sync; install=true; force=true; edit=true ;;
        '-Ss'|'--search') option=search ;;
        '-Si'|'--info') option=info; ((count++)) ;;
        '-Sii'|'--info') option=info; count=2 ;;
        '-Sw'|'--downloadonly') option=sync; force=true; edit=true ;;
        '-Qu'|'--upgrades') option=upgrades ;;
        '-Sc'|'--clean') option=cleancache; ((count++)); pacmanarg="$1" ;;
        '-Scc'|'--clean') option=cleancache; count=2; pacmanarg="$1" ;;
        '-r'|'--repo') repo='1' ;;
        '-a'|'--aur') aur='1' ;;
        # pacman shortcuts
        '-Sa') option=sync; install=true; force=true; edit=true; aur='1' ;;
        '-Sr') option=sync; install=true; force=true; edit=true; repo='1' ;;
        '-Ssa') option=search; aur='1' ;;
        '-Ssr') option=search; repo='1' ;;
        '-Ssq') option=search; quiet=true ;;
        '-Ssqa'|'-Ssaq') option=search; quiet=true; aur='1' ;;
        '-Ssqr'|'-Ssrq') option=search; quiet=true; repo='1' ;;
        '-Sia') option=info; ((count++)); aur='1' ;;
        '-Sir') option=info; ((count++)); repo='1' ;;
        '-Siia') option=info; count=2; aur='1' ;;
        '-Siir') option=info; count=2; repo='1' ;;
        '-Swa') option=sync; force=true; edit=true; aur='1' ;;
        '-Swr') option=sync; force=true; edit=true; repo='1' ;;
        '-Qua') option=upgrades; aur='1' ;;
        '-Qur') option=upgrades; repo='1' ;;
        '-Quq') option=upgrades; quiet=true ;;
        '-Quqa') option=upgrades; quiet=true; aur='1' ;;
        '-Quqr') option=upgrades; quiet=true; repo='1' ;;
        -S*u*w*a) option=sysupgrade; force=true; pacmanarg="$1"; aur='1' ;;
        -S*u*w*r) option=sysupgrade; force=true; pacmanarg="$1"; repo='1' ;;
        -S*u*w*) option=sysupgrade; force=true; pacmanarg="$1" ;;
        -S*u*a) option=sysupgrade; force=true; edit=true; install=true; pacmanarg="$1"; aur='1' ;;
        -S*u*r) option=sysupgrade; force=true; edit=true; install=true; pacmanarg="$1"; repo='1' ;;
        -S*u*|'--sysupgrade') option=sysupgrade; force=true; edit=true; install=true; pacmanarg="$1" ;;
        '-Sca') option=cleancache; ((count++)); pacmanarg="$1"; aur='1' ;;
        '-Scr') option=cleancache; ((count++)); pacmanarg="$1"; repo='1' ;;
        '-Scca') option=cleancache; count=2; pacmanarg="$1"; aur='1' ;;
        '-Sccr') option=cleancache; count=2; pacmanarg="$1"; repo='1' ;;
        # others
        '--devel') devel=true ;;
        '--asroot') makeopts+=("--asroot") ;;
        '--ignore') ignoredpkgs+=("$2"); ignorepkgs+=("--ignore" "$2") ; shift ;;
        '--noconfirm') noconfirm=true; pacopts+=("--noconfirm") ;;
        '--noedit') noedit=true ;;
        -D* | '--database') runasroot $pacmanBin $@; exit ;;
        -Q* | '--query') $pacmanBin $@; exit ;;
        -R* | '--remove') runasroot $pacmanBin $@; exit ;;
        -S* | '--sync') runasroot $pacmanBin $@; exit ;;
        -T* | '--deptest') runasroot $pacmanBin $@; exit ;;
        -U* | '--upgrade') runasroot $pacmanBin $@; exit ;;
        '-h'|'--help') usage; exit ;;
        '-v'|'--version') version; exit ;;
        --*) runasroot $pacmanBin $@; exit ;;
        -*) echo "$name: invalid option -- '$1'" ; exit ;;
        *) pkgs+=("$1") ;;
    esac
    shift
done


#
# Main
#

Core() {
    DownloadDepsAur ${pkgs[@]}
    MakePkgs ${deps[@]}
    CleanUp ${deps[@]}
}

ClassifyPkgs() {
    if [[ $fallback = true ]]; then
        [[ $repo ]] && repopkgs=${pkgs[@]}
        [[ $aur ]] && aurpkgs=${pkgs[@]}
        if [[ ! $repo && ! $aur ]]; then
            for package in ${pkgs[@]}; do
                [[ $($pacmanBin -S --print $package 2>&1 | grep -v "error:") == "" ]] && aurpkgs+=("$package") || repopkgs+=("$package")
            done
        fi
    else
        [[ ! $aur ]] && repopkgs=${pkgs[@]} || aurpkgs=${pkgs[@]}
    fi
}

# sanity check
[[ ! -d $buildDir ]] && error "Build directory does not exist!\nCheck configuration in /etc/${name}.conf"
[[ ! -f /usr/bin/$pacmanBin ]] && error "Pacman binary does not exist!\nCheck configuration in /etc/${name}.conf"
[[ ! $operation && ! $option && ! $cleanpkg && ! $editpkg ]] && error "no operation specified (use -h for help)"
[[ $repo && $aur ]] && error "target not found"

# search (-s) handling
if [[ $operation = search ]]; then
    SearchAur ${pkgs[@]}
    exit
fi

# info (-i) handling
if [[ $operation = info ]]; then
    InfoAur ${pkgs[@]}
    exit
fi

# download (-d) handling
if [[ $operation = download ]]; then
    [[ $count -eq 1 ]] && DownloadAur ${pkgs[@]} || DownloadDepsAur ${pkgs[@]}
    [[ ! $deps ]] && deps=("${pkgs[@]}")
    EditPkgs ${deps[@]}
    exit
fi

# build (-b) handling
if [[ $operation = build ]]; then
    FindDepsAur ${pkgs[@]}
    [[ ! $deps ]] && deps=("${pkgs[@]}")
    MakePkgs ${deps[@]}
    CleanUp ${deps[@]}
    exit
fi

# makepkg (-m) handling
# sync (-y) handling
# update (-u) handling
if [[ $operation = makepkg ]]; then
    [[ $upgrade ]] && UpgradeAur
    Core ${pkgs[@]}
    exit
fi

# check (-k) handling
if [[ $operation = check ]]; then
    CheckAur ${pkgs[@]}
    exit
fi

# abs (-abs) handling
if [[ $operation = abs ]]; then
    CopyAbs ${pkgs[@]}
    EditPkgs ${pkgs[@]}
    exit
fi

# pacman search (-Ss) handling
if [[ $option = search ]]; then
    [[ ! $aur ]] && [[ ! $quiet ]] && $pacmanBin -Ss ${pkgs[@]}
    [[ ! $aur ]] && [[ $quiet ]] && $pacmanBin -Ssq ${pkgs[@]}
    [[ ! $repo ]] && [[ $fallback = true || $aur ]] && SearchAur ${pkgs[@]}
    exit
fi

# pacman sync (-S) handling
# pacman downloadonly (-Sw) handling
if [[ $option = sync ]]; then
    ClassifyPkgs ${pkgs[@]}
    if [[ ${repopkgs[@]} ]]; then
        [[ $install ]] && runasroot $pacmanBin -S ${pacopts[@]} ${repopkgs[@]}
        [[ ! $install ]] && runasroot $pacmanBin -Sw ${pacopts[@]} ${repopkgs[@]}
    fi
    if [[ ${aurpkgs[@]} ]]; then
        [[ $fallback = true && ! $aur ]] && warn "Package(s) ${colorW}${aurpkgs[@]}${reset} not found in repositories, trying ${colorM}aur${reset}..."
        Core ${aurpkgs[@]}
    fi
    exit
fi

# pacman info (-Si) handling
if [[ $option = info ]]; then
    ClassifyPkgs ${pkgs[@]}
    if [[ ${repopkgs[@]} ]]; then
        [[ $count -eq 1 ]] && $pacmanBin -Si ${repopkgs[@]}
        [[ $count -ne 1 ]] && $pacmanBin -Sii ${repopkgs[@]}
    fi
    if [[ ${aurpkgs[@]} ]]; then
        [[ $fallback = true && ! $aur ]] && warn "Package(s) ${colorW}${aurpkgs[@]}${reset} not found in repositories, trying ${colorM}aur${reset}..."
        InfoAur ${aurpkgs[@]}
    fi
    exit
fi

# pacman sysupgrade (-Su) handling
if [[ $option = sysupgrade ]]; then
    [[ $(echo $pacmanarg | grep -v "r$") == "" ]] && pacmanarg=${pacmanarg%?}
    [[ ! $aur ]] && runasroot $pacmanBin $pacmanarg ${pacopts[@]} ${ignorepkgs[@]}
    [[ ! $repo ]] && [[ $fallback = true || $aur ]] && UpgradeAur && [[ $install ]] && Core ${pkgs[@]}
    exit
fi

# pacman upgrades (-Qu) handling
if [[ $option = upgrades ]]; then
    [[ ! $aur ]] && CheckRepo ${pkgs[@]}
    [[ ! $repo ]] && [[ $fallback = true || $aur ]] && CheckAur ${pkgs[@]}
    exit
fi

# pacman clean (-Sc) handling
if [[ $option = cleancache ]]; then
    [[ $(echo $pacmanarg | grep -v "r$") == "" ]] && pacmanarg=${pacmanarg%?}
    [[ ! $aur ]] && runasroot $pacmanBin $pacmanarg
    [[ ! $repo ]] && [[ $fallback = true || $aur ]] && CleanCache ${pkgs[@]}
    exit
fi

# edit (-e) handling
if [[ $editpkg && ! $noedit ]]; then
    EditPkgs ${pkgs[@]}
    exit
fi

# clean (-c) handling
if [[ $cleanpkg ]]; then
    CleanUp ${pkgs[@]}
    exit
fi

# vim:set ts=4 sw=2 et:
